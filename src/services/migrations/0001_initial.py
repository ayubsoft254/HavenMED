# Generated by Django 5.2.4 on 2025-07-08 14:25

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0002_healthcareprofessionalprofile_average_rating_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ServiceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('base_price', models.DecimalField(decimal_places=2, help_text='Base price in KES', max_digits=10)),
                ('duration_minutes', models.PositiveIntegerField(default=30)),
                ('virtual_available', models.BooleanField(default=True)),
                ('home_visit_available', models.BooleanField(default=True)),
                ('in_person_available', models.BooleanField(default=True)),
                ('home_visit_extra_fee', models.DecimalField(decimal_places=2, default=0, help_text='Additional fee for home visits', max_digits=10)),
                ('urgent_fee', models.DecimalField(decimal_places=2, default=0, help_text='Additional fee for urgent appointments', max_digits=10)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('appointment_type', models.CharField(choices=[('virtual', 'Virtual Consultation'), ('home_visit', 'Home Visit'), ('in_person', 'In-Person')], max_length=20)),
                ('appointment_date', models.DateField()),
                ('appointment_time', models.TimeField()),
                ('duration_minutes', models.PositiveIntegerField(default=30)),
                ('priority', models.CharField(choices=[('normal', 'Normal'), ('urgent', 'Urgent'), ('emergency', 'Emergency')], default='normal', max_length=10)),
                ('status', models.CharField(choices=[('pending', 'Pending Confirmation'), ('confirmed', 'Confirmed'), ('paid', 'Paid'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('no_show', 'No Show'), ('rescheduled', 'Rescheduled')], default='pending', max_length=20)),
                ('chief_complaint', models.TextField(help_text='Main reason for the appointment')),
                ('symptoms', models.TextField(blank=True, help_text='Current symptoms')),
                ('medical_history_notes', models.TextField(blank=True, help_text='Relevant medical history')),
                ('current_medications', models.TextField(blank=True, help_text='Current medications')),
                ('allergies_notes', models.TextField(blank=True, help_text='Known allergies')),
                ('visit_address', models.TextField(blank=True, help_text='Address for home visit')),
                ('visit_coordinates', models.CharField(blank=True, help_text='GPS coordinates', max_length=100)),
                ('visit_instructions', models.TextField(blank=True, help_text='Special instructions for finding location')),
                ('google_meet_link', models.URLField(blank=True, help_text='Google Meet link for virtual consultation')),
                ('meeting_room_id', models.CharField(blank=True, max_length=100)),
                ('consultation_fee', models.DecimalField(decimal_places=2, max_digits=10)),
                ('additional_fees', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('is_paid', models.BooleanField(default=False)),
                ('payment_method', models.CharField(blank=True, max_length=50)),
                ('payment_reference', models.CharField(blank=True, max_length=100)),
                ('paid_at', models.DateTimeField(blank=True, null=True)),
                ('patient_phone', models.CharField(help_text='Patient contact for this appointment', max_length=15)),
                ('patient_email', models.EmailField(blank=True, max_length=254)),
                ('follow_up_required', models.BooleanField(default=False)),
                ('follow_up_date', models.DateField(blank=True, null=True)),
                ('follow_up_notes', models.TextField(blank=True)),
                ('diagnosis', models.TextField(blank=True)),
                ('treatment_plan', models.TextField(blank=True)),
                ('prescription', models.TextField(blank=True)),
                ('doctor_notes', models.TextField(blank=True)),
                ('patient_rating', models.PositiveIntegerField(blank=True, help_text='Rating from 1-5', null=True)),
                ('patient_review', models.TextField(blank=True)),
                ('doctor_rating', models.PositiveIntegerField(blank=True, help_text="Doctor's rating of patient", null=True)),
                ('doctor_notes_about_patient', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('healthcare_professional', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='accounts.healthcareprofessionalprofile')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='accounts.patientprofile')),
                ('service_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='services.servicetype')),
            ],
            options={
                'ordering': ['-appointment_date', '-appointment_time'],
            },
        ),
        migrations.CreateModel(
            name='AppointmentAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='appointment_attachments/')),
                ('filename', models.CharField(max_length=255)),
                ('file_type', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=200)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='services.appointment')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AppointmentReschedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('old_date', models.DateField()),
                ('old_time', models.TimeField()),
                ('new_date', models.DateField()),
                ('new_time', models.TimeField()),
                ('reason', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('original_appointment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reschedule_history', to='services.appointment')),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ConsultationNotes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blood_pressure_systolic', models.PositiveIntegerField(blank=True, null=True)),
                ('blood_pressure_diastolic', models.PositiveIntegerField(blank=True, null=True)),
                ('heart_rate', models.PositiveIntegerField(blank=True, help_text='BPM', null=True)),
                ('temperature', models.DecimalField(blank=True, decimal_places=1, help_text='Celsius', max_digits=4, null=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='KG', max_digits=5, null=True)),
                ('height', models.DecimalField(blank=True, decimal_places=2, help_text='CM', max_digits=5, null=True)),
                ('chief_complaint_details', models.TextField(blank=True)),
                ('history_of_present_illness', models.TextField(blank=True)),
                ('physical_examination', models.TextField(blank=True)),
                ('assessment_and_plan', models.TextField(blank=True)),
                ('medications_prescribed', models.TextField(blank=True)),
                ('lab_tests_ordered', models.TextField(blank=True)),
                ('follow_up_instructions', models.TextField(blank=True)),
                ('lifestyle_recommendations', models.TextField(blank=True)),
                ('differential_diagnosis', models.TextField(blank=True)),
                ('clinical_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('appointment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='consultation_notes', to='services.appointment')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_method', models.CharField(choices=[('mpesa', 'M-Pesa'), ('card', 'Credit/Debit Card'), ('bank_transfer', 'Bank Transfer'), ('cash', 'Cash')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('external_reference', models.CharField(blank=True, help_text='Payment gateway reference', max_length=100)),
                ('mpesa_receipt_number', models.CharField(blank=True, max_length=50)),
                ('transaction_id', models.CharField(blank=True, max_length=100)),
                ('phone_number', models.CharField(blank=True, help_text='Phone number for M-Pesa', max_length=15)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('appointment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='payment', to='services.appointment')),
            ],
        ),
        migrations.CreateModel(
            name='SpecialAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('slot_duration', models.PositiveIntegerField(default=30)),
                ('is_available', models.BooleanField(default=True)),
                ('virtual_consultations_available', models.BooleanField(default=True)),
                ('home_visits_available', models.BooleanField(default=False)),
                ('in_person_available', models.BooleanField(default=True)),
                ('reason', models.CharField(blank=True, help_text='Reason for special availability/unavailability', max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('healthcare_professional', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='special_availability', to='accounts.healthcareprofessionalprofile')),
            ],
            options={
                'ordering': ['date', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='AvailabilitySlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.CharField(choices=[('monday', 'Monday'), ('tuesday', 'Tuesday'), ('wednesday', 'Wednesday'), ('thursday', 'Thursday'), ('friday', 'Friday'), ('saturday', 'Saturday'), ('sunday', 'Sunday')], max_length=10)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('slot_duration', models.PositiveIntegerField(default=30, help_text='Duration in minutes')),
                ('is_active', models.BooleanField(default=True)),
                ('virtual_consultations_available', models.BooleanField(default=True)),
                ('home_visits_available', models.BooleanField(default=False)),
                ('in_person_available', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('healthcare_professional', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availability_slots', to='accounts.healthcareprofessionalprofile')),
            ],
            options={
                'ordering': ['day_of_week', 'start_time'],
                'unique_together': {('healthcare_professional', 'day_of_week', 'start_time')},
            },
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['appointment_date', 'appointment_time'], name='services_ap_appoint_7f1e9f_idx'),
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['healthcare_professional', 'status'], name='services_ap_healthc_27ca11_idx'),
        ),
        migrations.AddIndex(
            model_name='appointment',
            index=models.Index(fields=['patient', 'status'], name='services_ap_patient_9d1c23_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='specialavailability',
            unique_together={('healthcare_professional', 'date', 'start_time')},
        ),
    ]
